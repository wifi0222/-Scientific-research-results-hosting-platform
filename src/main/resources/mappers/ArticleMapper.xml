<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mapper.ArticleMapper">

    <!-- 插入文章
     useGeneratedKeys = true 表示 MyBatis 会返回数据库生成的主键
     keyProperty 指定实体类中的属性名，keyColumn 指定数据库表中的列名-->
    <!-- 插入文章并返回自增的 articleID -->
    <insert id="insertArticle" parameterType="com.example.model.Article" useGeneratedKeys="true"
            keyProperty="articleID" keyColumn="articleID">
        INSERT INTO Article (title, category, abstract, contents, publishDate, teamID, status, viewStatus)
        VALUES (#{title}, #{category}, #{abstractContent}, #{contents}, #{publishDate}, #{teamID}, #{status},
                #{viewStatus})
    </insert>

    <!-- 更新文章 -->
    <update id="updateArticle" parameterType="com.example.model.Article">
        UPDATE Article
        SET title       = #{title},
            category    = #{category},
            abstract    = #{abstractContent},
            contents    = #{contents},
            publishDate = #{publishDate},
            teamID      = #{teamID},
            status      = #{status},
            viewStatus  = #{viewStatus}
        WHERE articleID = #{articleID}
    </update>

    <!-- 删除文章 -->
    <delete id="deleteArticle" parameterType="int">
        DELETE
        FROM Article
        WHERE articleID = #{articleID}
    </delete>

    <!-- 根据 ID 获取文章 -->
    <select id="getArticleById" parameterType="int" resultType="com.example.model.Article">
        SELECT articleID,
               title,
               category,
               abstract AS abstractContent,
               contents,
               publishDate,
               teamID,
               status,
               viewStatus,
               refusalReason
        FROM Article
        WHERE articleID = #{articleID}
    </select>

    <!-- 获取团队的所有文章 -->
    <select id="getArticlesByTeam" parameterType="int" resultType="com.example.model.Article">
        SELECT articleID,
               title,
               category,
               abstract AS abstractContent,
               contents,
               publishDate,
               teamID,
               status,
               viewStatus,
               refusalReason
        FROM Article
        WHERE teamID = #{teamID}
        ORDER BY publishDate DESC
    </select>

    <!-- 搜索文章 -->
    <select id="searchArticles" parameterType="map" resultType="com.example.model.Article">
        SELECT articleID,
               title,
               category,
               abstract AS abstractContent,
               contents,
               publishDate,
               teamID,
               status,
               viewStatus
        FROM Article
        WHERE title LIKE CONCAT('%', #{keyword}, '%')
          AND category = #{category}
        ORDER BY publishDate DESC
    </select>

    <!-- 获取所有文章 -->
    <select id="getAllArticles" resultType="com.example.model.Article">
        SELECT articleID,
               title,
               category,
               abstract AS abstractContent,
               contents,
               publishDate,
               teamID,
               status,
               viewStatus,
               refusalReason
        FROM Article
        ORDER BY publishDate DESC
    </select>

    <!-- 更新文章状态 -->
    <update id="updateArticleStatus" parameterType="map">
        UPDATE Article
        SET status = #{status}
        WHERE articleID = #{articleID}
    </update>

    <!-- 更新文章的可见性 -->
    <update id="updateArticleVisibility" parameterType="map">
        UPDATE Article
        SET viewStatus = #{viewStatus}
        WHERE articleID = #{articleID}
    </update>

    <!-- 新增的更新 refusalReason 的 SQL 语句 -->
    <update id="updateRefusalReason" parameterType="map">
        UPDATE Article
        SET refusalReason = #{refusalReason}
        WHERE articleID = #{articleID}
    </update>

</mapper>
