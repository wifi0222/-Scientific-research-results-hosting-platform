<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mapper.UserMapper">

<!--    查找所有团队管理员-->
    <select id="findAllTeamAdmin" resultType="com.example.model.User">
        SELECT * FROM [user]
        WHERE roleType='TeamAdmin'
    </select>

    <select id="findAllTeamMember" resultType="com.example.model.User">
        SELECT * FROM [user]
        WHERE roleType='TeamMember'
    </select>

    <!-- 根据 userID 查询用户 -->
    <select id="findByUserId" parameterType="int" resultType="com.example.model.User">
        SELECT * FROM [user]
        WHERE userID = #{userId};
    </select>

    <!-- 根据 username 查询用户 -->
    <select id="findByUsername" parameterType="String" resultType="com.example.model.User">
        SELECT * FROM [user]
        WHERE username = #{username};
    </select>

    <!-- 检查用户名和邮箱是否匹配 -->
    <select id="checkUsernameAndEmail" resultType="int">
        SELECT COUNT(*) FROM [user]
        WHERE username = #{username} AND email = #{email}
    </select>

    <!-- 检查新密码是否与旧密码一致 -->
    <select id="checkOldPassword" resultType="int">
        SELECT COUNT(*) FROM [user]
        WHERE username = #{username} AND password = #{password}
    </select>

    <!-- 更新用户密码 -->
    <update id="updatePassword">
        UPDATE [user]
        SET password = #{password}
        WHERE username = #{username}
    </update>

    <!-- 插入用户修改记录到审核表 -->
    <insert id="insertReview">
        MERGE INTO MemberInfoReview AS target
        USING (SELECT
        #{userID} AS memberID,
        #{name} AS name,
        #{researchField} AS researchField,
        #{contactInfo} AS contactInfo,
        #{academicBackground} AS academicBackground,
        #{researchAchievements} AS researchAchievements,
        #{avatarFile} AS avatarFile,
        0 AS modificationStatus
        ) AS source
        ON (target.memberID = source.memberID)
        WHEN MATCHED THEN
        UPDATE SET
        name = source.name,
        researchField = source.researchField,
        contactInfo = source.contactInfo,
        academicBackground = source.academicBackground,
        researchAchievements = source.researchAchievements,
        avatarFile = source.avatarFile,  <!-- 更新头像文件路径 -->
        modificationStatus = source.modificationStatus
        WHEN NOT MATCHED THEN
        INSERT (memberID, name, researchField, contactInfo, academicBackground, researchAchievements, avatarFile, modificationStatus)
        VALUES (source.memberID, source.name, source.researchField, source.contactInfo, source.academicBackground, source.researchAchievements, source.avatarFile, source.modificationStatus);
    </insert>


    <update id="updatePasswordbyid" parameterType="com.example.model.User">
        UPDATE [User]
        SET password = #{password}
        WHERE userID = #{userID}
    </update>

    <!-- 检查注销申请是否已存在 -->
    <select id="checkDeactivationRequest" parameterType="int" resultType="int">
        SELECT COUNT(*)
        FROM AccountDeactivationReview
        WHERE userID = #{userID} AND deactivationStatus = 0
    </select>

    <!-- 插入注销申请 -->
    <insert id="insertDeactivationRequest" parameterType="int">
        MERGE INTO AccountDeactivationReview AS target
            USING (SELECT #{userID} AS userID, 0 AS deactivationStatus, GETDATE() AS deactivationTime) AS source
            ON (target.userID = source.userID)
            WHEN MATCHED THEN
                UPDATE SET deactivationStatus = source.deactivationStatus, deactivationTime = source.deactivationTime
            WHEN NOT MATCHED THEN
                INSERT (userID, deactivationStatus, deactivationTime)
                    VALUES (source.userID, source.deactivationStatus, source.deactivationTime);
    </insert>

    <update id="updateTeamAdminInfo" parameterType="com.example.model.User">
        UPDATE [User]
        SET
            username = #{username},
            password = #{password},
            roleType = #{roleType},
            email = #{email},
            registrationTime = #{registrationTime},
            status = #{status},
            name = #{name},
            researchField = #{researchField},
            contactInfo = #{contactInfo},
            academicBackground = #{academicBackground},
            researchAchievements = #{researchAchievements}
        WHERE userID = #{userID};
    </update>

    <insert id="insertTeamAdminToUser">
        INSERT INTO [User](username,password,roleType,status)
        VALUES(#{username},#{password},'TeamAdmin',1)
    </insert>

    <select id="findNameByUserID" resultType="String" parameterType="int">
        SELECT name FROM [User] WHERE userID=#{userID}
    </select>

    <select id="findUsernameByUserID" resultType="String" parameterType="int">
        SELECT username FROM [User] WHERE userID=#{userID}
    </select>

    <insert id="addTeamMember" parameterType="com.example.model.User">
        INSERT INTO [User]
        (
            username,
            password,
            roleType,
            email,
            registrationTime,
            status,
            name,
            researchField,
            contactInfo,
            academicBackground,
            researchAchievements
        )
        VALUES
            (
            #{username},
            #{password},
            'TeamMember',
            #{email},
            GETDATE(),
            1,
            #{name},
            #{researchField},
            #{contactInfo},
            #{academicBackground},
            #{researchAchievements}
            );
    </insert>

    <update id="updateTeamMember" parameterType="com.example.model.User">
        UPDATE [User]
        SET email=#{email},name=#{name},researchField=#{researchField},contactInfo=#{contactInfo},
            academicBackground=#{academicBackground}, researchAchievements=#{researchAchievements}
        WHERE userID=#{userID}
    </update>

    <update id="updateTeamMemberInfo" parameterType="com.example.model.MemberReview">
        UPDATE [User]
        SET name=#{name},researchField=#{researchField},contactInfo=#{contactInfo},
        academicBackground=#{academicBackground}, researchAchievements=#{researchAchievements},avatarFile=#{avatarFile}
        WHERE userID=#{memberID}
    </update>

    <!-- 通过注册用户表插入用户 -->
    <insert id="addNewUser" parameterType="com.example.model.RegistrationReview">
        INSERT INTO [User]
        (username,
         password,
         roleType,
         email,
         registrationTime,
         status)
        VALUES
        (
            #{username},
            #{password},
            #{roleType},
            #{email},
            #{registrationTime},
            1
            )
    </insert>

    <select id="findTeamMemberAndVisitor" resultType="com.example.model.User">
        SELECT * FROM [User]
        WHERE roleType='TeamMember' OR roleType='Visitor'
    </select>

    <delete id="deleteById">
        DELETE FROM [User]
        WHERE userID=#{userID}
    </delete>

    <update id="ResetPassword" parameterType="map">
        UPDATE [User]
        SET password=#{password}
        WHERE userID=#{userID}
    </update>

    <!-- 使用动态 SQL 来构建查询条件 -->
    <select id="searchUsers" resultType="com.example.model.User">
        SELECT * FROM [User]
        <where>
            <if test="username != null and username != ''">
                AND username LIKE CONCAT('%', #{username}, '%')
            </if>

            <if test="roleType != null and roleType != ''">
                AND roleType = #{roleType}
            </if>

            <if test="roleType == null or roleType == ''">
                AND (roleType='TeamMember' OR roleType='Visitor')
            </if>

            <if test="status != null">
                AND status = #{status}
            </if>

            <if test="registrationTime != null and registrationTime != ''">
                AND FORMAT(registrationTime, 'yyyy-MM-dd') = #{registrationTime}
            </if>

            <if test="email != null and email != ''">
                AND email LIKE CONCAT('%', #{email}, '%')
            </if>
        </where>
    </select>
</mapper>
